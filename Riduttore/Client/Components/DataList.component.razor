@using Microsoft.AspNetCore.SignalR.Client
@inject IVideoApiClient _videoApiClient
@inject Bus _bus
@inject NavigationManager _navigation
@inject IDialogService _dialogService

@if (_videos is not null)
{
    <MudGrid Spacing="5" Justify="Justify.SpaceBetween">
    @foreach (VideoApiModel video in _videos)
        {
            <MudItem xs="12" sm=6 md=6 lg=3>
                <VideoItem_component Video="@video" />
            </MudItem>
        }
    </MudGrid>
}
<MudFab HtmlTag="label" 
        Color="Color.Tertiary" 
        Class="fab-right-corner" 
        Icon="@Icons.Material.Filled.AddCircle"
        @onclick="OpenDialog" />

<style>
    .fab-right-corner {
        position: fixed !important;
        right: 10px !important;
        bottom: 10px !important;
    }

    @@media (min-width: 800px) {
        .fab-right-corner {
            display: none;
        }
    }
</style>

@code {
    private HubConnection? hubConnection;
    private IEnumerable<VideoApiModel>? _videos;

    protected override async Task OnInitializedAsync()
    {
        _videos = await _videoApiClient.GetVideos(1);

        _bus.Subscribe<VideoUploaded>(async (video) =>
        {
            _videos = await _videoApiClient.GetVideos(1);

            this.StateHasChanged();
        });

        hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigation.ToAbsoluteUri("/riduttorehub"))
            .Build();

        @* hubConnection.On<VideoUploadedEvent>(RiduttoreHubEvents.VideoUploaded, (@event) =>
        {
            Console.WriteLine("Received from hub");
            StateHasChanged();
        }); *@

        await hubConnection.StartAsync();
    }

    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        _dialogService.Show<FileUpload>("Simple Dialog", options);
    }
}