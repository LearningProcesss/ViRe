@inject ISnackbar Snackbar
@inject IDialogService Dialog
@inject HttpClient Http
@inject IVideoApiClient videoApiClient
@inject Bus bus

<MudFab HtmlTag="label" Color="Color.Success" Icon="@Icons.Material.Filled.AddCircle"
@onclick="() => this._isVisible = true" />
<MudDialog @bind-IsVisible="_isVisible">
    <DialogContent>
        <MudFileUpload T="IBrowserFile" OnFilesChanged="OnInputFileChanged">
            <ButtonTemplate>
                <MudFab HtmlTag="label" Color="Color.Success" Icon="@Icons.Material.Filled.AttachFile" for="@context" />
            </ButtonTemplate>
        </MudFileUpload>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
            OnClick="@(async () => await Upload())">
            Submit
        </MudButton>
    </DialogContent>
</MudDialog>

@code {
    private bool _isVisible = false;
    private List<string> fileNames = new List<string>();
    private IBrowserFile? _browserFile;

    private void OpenDialog()
    {

    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        _browserFile = e.File;
    }

    private async Task Upload()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!", Severity.Normal);

        @* await videoApiClient.GetVideoById("fjfjfj"); *@

        @* await videoApiClient.Upload(new Refit.StreamPart(_browserFile!.OpenReadStream(long.MaxValue), _browserFile.Name,
_browserFile.ContentType, "files")); *@

        StreamContent fileContent = new(_browserFile!.OpenReadStream(long.MaxValue));

        using MultipartFormDataContent multipartFormDataContent = new();

        fileContent.Headers.ContentType =
        new System.Net.Http.Headers.MediaTypeHeaderValue(_browserFile.ContentType);

        multipartFormDataContent.Add(content: fileContent,
        name: "\"files\"",
        fileName: _browserFile.Name);

        var response = await Http.PostAsync("/api/videos", multipartFormDataContent);

        response.EnsureSuccessStatusCode();

        VideoApiModel? newUploadResults = await response.Content
                                                .ReadFromJsonAsync<VideoApiModel>();
        
        _isVisible = false;

        bus.Publish(new VideoUploaded(newUploadResults!));
    }
}